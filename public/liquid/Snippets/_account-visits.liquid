<script type="text/javascript">// thanks to https://jsfiddle.net/UselessCode/qm5AG/ as a starting point
  var icsFile = null;
  function makeIcsFile(date, summary, description) {
    var test =
      "BEGIN:VCALENDAR\n" +
      "CALSCALE:GREGORIAN\n" +
      "METHOD:PUBLISH\n" +
      "PRODID:-//Test Cal//EN\n" +
      "VERSION:2.0\n" +
      "BEGIN:VEVENT\n" +
      "UID:test-1\n" +
      "DTSTART;VALUE=DATE:" +
      convertDate(date.start) +
      "\n" +
      "DTEND;VALUE=DATE:" +
      convertDate(date.end) +
      "\n" +
      "SUMMARY:" +
      summary +
      "\n" +
      "DESCRIPTION:" +
      description +
      "\n" +
      "END:VEVENT\n" +
      "END:VCALENDAR";

    var data = new File([test], { type: "text/plain" });

    // If we are replacing a previously generated file we need to
    // manually revoke the object URL to avoid memory leaks.
    if (icsFile !== null) {
      window.URL.revokeObjectURL(icsFile);
    }

    icsFile = window.URL.createObjectURL(data);

    return icsFile;
  }
</script>
<script>
  function closeReschedule() {
    document.getElementById("account").style.overflowY = 'auto';
    document.getElementById("rescheduleMe").style.visibility = "hidden";
  }
  function cancelAppointment(appointmentId, siteId) {
    document.getElementById("loadMe").style.visibility = "visible";
    fetch(`${urlBase}/user/appointments/${appointmentId}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        "authorization": `Bearer ${accessToken}`
      },
      body: JSON.stringify({ 
        siteId,
        "notes": "Cancelled"
      })
    }).then((res) => {
      updateAppointments();
    });
  }
  function processReschedule(siteId, staffId, appointmentId, startDateTime, locationId) {
    console.log({siteId, staffId, appointmentId, startDateTime, locationId});
    
    document.getElementById("loadMe").style.visibility = "visible";
    closeReschedule();
    fetch(`${urlBase}/user/appointments/${appointmentId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        "authorization": `Bearer ${accessToken}`
      },
      body: JSON.stringify({ 
        startDateTime,
        staffId,
        siteId,
        locationId,
        notes:"Notes..."
      })
    }).then((res) => {
      updateAppointments();
    });
  }
  function rescheduleAppointment(visitType, appointmentId, siteId, locationId) {
    console.log("RESCHEDULE")
    document.getElementById("loadMe").style.visibility = "visible";

    const urlParams = new URLSearchParams({
        startDate: document.getElementById("datePickerStart").value,
        endDate: document.getElementById("datePickerEnd").value,
        siteId,
        locationId,
      });
    fetch(`${urlBase}/user/appointments/${visitType}?${urlParams}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        "authorization": `Bearer ${accessToken}`
      },
    }).then((res) => res.json()).then((appointments) => {
      const rescheduleModalContents = document.getElementById("rescheduleModalContents");
      rescheduleModalContents.innerHTML = '';
      rescheduleModalContents.style.opacity = 1;
      
      apptDates = {};
      Object.keys(appointments).map((appointmentDate) => {
        const dateDiv = document.createElement('div');
        dateDiv.style.marginBottom = '29px';
        dateDiv.style.className = 'flex-col';
        dateDiv.style.maxWidth = '812px';
                
        const dateTitle = document.createElement('div');
        dateTitle.innerHTML = formatAppointmentDate(new Date(appointmentDate));
        dateTitle.style.textAlign = "left";
        dateTitle.className = "";
        dateTitle.style.color = "var(--unnamed-color-adb5bd)";
        dateTitle.style.marginBottom = '29px';
        dateTitle.style.fontSize = '12px';
        dateDiv.appendChild(dateTitle);
        
        const dateContainer = document.createElement('div');
        dateContainer.className = "comm-table-col";
        dateContainer.style.gap = "10px";
        dateContainer.style.justifyContent = 'flex-start';
        dateContainer.style.alignItems = 'center';
        dateContainer.style.flexWrap = 'wrap';
        
        Object.keys(appointments[appointmentDate]).map((staffId) => {
          const podContainer = document.createElement('div');
          podContainer.className = "comm-table-col";
          
          const podTitle = document.createElement('div');
          podTitle.className = "SF";
          podTitle.innerHTML = appointments[appointmentDate][staffId].displayName;
          podContainer.appendChild(podTitle);
          
          const podAppts = document.createElement('div');
          podAppts.className = "comm-table-row";
          appointments[appointmentDate][staffId].times.map((time) => {
            const apptDiv = document.createElement('div');
            apptDiv.className = "comm-table-col";
            apptDiv.style.backgroundColor = "#fff";
            apptDiv.style.border = "1px solid #CFD4D9";
            apptDiv.style.padding = "26px 94px";
            apptDiv.style.textTransform = "uppercase";
            apptDiv.style.alignItems = "center";
            apptDiv.style.cursor = "pointer";
            apptDiv.onclick = () => processReschedule(siteId, staffId, appointmentId, time.startDateTime, locationId);
            
            const timeDiv = document.createElement('div');
            timeDiv.innerHTML = time.timeSlot;
            timeDiv.style.color = "var(--unnamed-color-212529)";
            timeDiv.style.fontSize = "16px";
  
            const name = document.createElement('div');
            name.innerHTML = appointments[appointmentDate][staffId].appointmentName;
            name.className = "SF";
            name.style.textTransform = "none";
            name.style.color = "var(--unnamed-color-495057)";

            apptDiv.appendChild(timeDiv);
            apptDiv.appendChild(name);
        
            podAppts.appendChild(apptDiv);
          })
          podContainer.appendChild(podAppts);
          dateContainer.appendChild(podContainer);
        });
        dateDiv.appendChild(dateContainer);
        rescheduleModalContents.appendChild(dateDiv);
      });
      document.getElementById("loadMe").style.visibility = "hidden";
    });
  }
  function appointmentCard(app) {
    const startDateTime = new Date(app.StartDate);
    const inFuture = startDateTime > new Date();

    const endDateTime = new Date(app.EndDate);

    const container = document.createElement("div");
    container.className = "comm-table-row";
    container.style.alignItems = "flex-start";

    const appointment = document.createElement("div");
    appointment.className = "comm-table-col";
    appointment.style.width = "45%";

    const date = document.createElement("div");
    date.innerHTML = formatDate(startDateTime);
    date.className = "medium";
    date.style.textTransform = "uppercase";
    appointment.appendChild(date);

    const time = document.createElement("div");
    time.innerHTML = `${formatAMPM(startDateTime)} - ${formatAMPM(endDateTime)} ${getTimeZone(startDateTime)}`;
    time.className = "medium SF";
    time.style.color = "var(--unnamed-color-6c757d)";
    appointment.appendChild(time);

    const location = document.createElement("div");
    location.className = "comm-table-row";
    location.style.marginTop = "20px";

    const what = document.createElement("div");
    what.className = "comm-table-col";
    const whatTitle = document.createElement("div");
    whatTitle.innerHTML = "WHAT";
    whatTitle.style.color = "var(--unnamed-color-6c757d)";
    whatTitle.style.fontSize = "12px";
    whatTitle.className = "";
    const whatContents = document.createElement("div");
    whatContents.innerHTML = app.Name;
    whatContents.className = "medium SF";
    whatContents.style.color = "var(--unnamed-color-212529)";
    whatContents.style.fontSize = "18px";

    what.appendChild(whatTitle);
    what.appendChild(whatContents);
    location.appendChild(what);

    const where = document.createElement("div");
    where.className = "comm-table-col";
    const whereTitle = document.createElement("div");
    whereTitle.innerHTML = "WHERE";
    whereTitle.className = "";
    whereTitle.style.color = "var(--unnamed-color-6c757d)";
    whereTitle.style.fontSize = "12px";
    where.style.marginLeft = "20px";

    const whereContents = document.createElement("div");
    whereContents.className = "medium SF";
    whereContents.innerHTML = app.Location;
    whereContents.style.color = "var(--unnamed-color-212529)";
    whereContents.style.fontSize = "18px";

    where.appendChild(whereTitle);
    where.appendChild(whereContents);
    location.appendChild(where);

    appointment.appendChild(location);
    container.appendChild(appointment);

    const schedule = document.createElement("div");
    schedule.className = "comm-table-col";
    schedule.style.width = "45%";
    schedule.style.alignItems = "flex-end";
    if (inFuture) {
      const cancel = document.createElement("div");
      cancel.innerHTML = "CANCEL";
      cancel.style.textDecoration = "underline";
      cancel.style.cursor = "pointer";
      cancel.style.color = "var(--unnamed-color-212529)";
      cancel.setAttribute("data-id", app.AppointmentId);
      cancel.setAttribute("data-site-id", app.SiteId);
      cancel.onclick = () => loadCancelMe(() => cancelAppointment(app.AppointmentId, app.SiteId));

      const reschedule = document.createElement("div");
      reschedule.innerHTML = "RESCHEDULE";
      reschedule.style.textDecoration = "underline";
      reschedule.style.cursor = "pointer";
      reschedule.style.color = "var(--unnamed-color-212529)";
      reschedule.onclick = () => loadRescheduleModal(() => rescheduleAppointment(app.VisitType, app.AppointmentId, app.SiteId, app.LocationId));

      const outlookContainer = document.createElement("div");
      outlookContainer.className = "flex-row";
      outlookContainer.style.justifyContent = "flex-end";

      const outlookIcon = document.createElement("img");
      outlookIcon.src = "{{ '_outlook-icon.svg' | asset_url }}";
      // outlookIcon.src = "https://cdn.shopify.com/s/files/1/0555/5945/5032/t/3/assets/_outlook-icon.svg";
      outlookIcon.alt = "OUTLOOK";
      outlookIcon.style.width = "17px";
      outlookIcon.style.height = "16px";
      outlookIcon.style.marginRight = "13px";
      outlookContainer.appendChild(outlookIcon);

      const outlook = document.createElement("a");
      outlook.innerHTML = "ADD TO ICAL/OUTLOOK";
      outlook.style.cursor = "pointer";
      outlook.target = "_blank";
      outlook.href = makeIcsFile({ start: startDateTime, end: endDateTime }, app.Name, app.Location);
      outlook.style.color = "var(--unnamed-color-6c757d)";
      outlookContainer.appendChild(outlook);

      const gmailContainer = document.createElement("div");
      gmailContainer.className = "flex-row";
      gmailContainer.style.justifyContent = "flex-end";

      const gmailIcon = document.createElement("img");
      gmailIcon.src = "{{ '_gmail-icon.svg' | asset_url }}";
      // gmailIcon.src = "https://cdn.shopify.com/s/files/1/0555/5945/5032/t/3/assets/_gmail-icon.svg";
      gmailIcon.alt = "GMAIL";
      gmailIcon.style.width = "17px";
      gmailIcon.style.height = "13px";
      gmailIcon.style.marginRight = "13px";
      gmailContainer.appendChild(gmailIcon);

      const gmail = document.createElement("a");
      gmail.href = `https://calendar.google.com/calendar/render?action=TEMPLATE&text=${app.Name}&dates=${startDateTime.toISOString().replace(/-|:|\.\d\d\d/g, "")}/${endDateTime.toISOString().replace(/-|:|\.\d\d\d/g, "")}&details=${app.Name}&location=${app.Location}&sf=true&output=xml`;
      gmail.target = "_blank";
      gmail.innerHTML = "ADD TO GMAIL";
      gmail.style.cursor = "pointer";
      gmail.style.color = "var(--unnamed-color-6c757d)";
      gmailContainer.appendChild(gmail);

      schedule.appendChild(cancel);
      schedule.appendChild(reschedule);
      schedule.appendChild(document.createElement("br"));
      schedule.appendChild(outlookContainer);
      schedule.appendChild(gmailContainer);
    } else {
      const bookAgain = document.createElement("div");
      bookAgain.innerHTML = "BOOK AGAIN";
      bookAgain.style.textDecoration = "underline";
      bookAgain.style.color = "var(--unnamed-color-212529)";
      bookAgain.style.cursor = "pointer";
      bookAgain.onclick = () => window.location.href = '/pages/appointments';

      schedule.appendChild(bookAgain);
    }
    container.appendChild(schedule);
    return container;
  };
        
  const updateAppointments = () => {
    fetch(`${urlBase}/user/visits`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        "authorization": `Bearer ${accessToken}`
      },

    }).then(res => res.json()).then(({ Appointments, History, Locations }) => {
      const appointmentsPanel = document.getElementById("AppointmentsPanel");
      const noAppointments = document.getElementById("noAppointments");

      const historyPanel = document.getElementById("HistoryPanel");
      const noHistory = document.getElementById("noHistory");

      if (Appointments.length === 0) {
        noAppointments.style.display = "block";
        appointmentsPanel.style.display = "none";
      } else {
        appointmentsPanel.innerHTML = "";
        for (let i = 0; i < Appointments.length; i++) {
          appointmentsPanel.appendChild(appointmentCard(Appointments[i]));
          appointmentsPanel.appendChild(document.createElement("hr"));
        }

        noAppointments.style.display = "none";
        appointmentsPanel.style.display = "block";
      }
      document.getElementById("appointmentsPanelLoading").style.display = "none";
      if (History.length === 0) {
        noHistory.style.display = "block";
        historyPanel.style.display = "none";
      } else {
        historyPanel.innerHTML = "";
        for (let i = 0; i < History.length; i++) {
          historyPanel.appendChild(appointmentCard(History[i]));
          historyPanel.appendChild(document.createElement("hr"));
        }
        noHistory.style.display = "none";
        historyPanel.style.display = "block";
      }
      document.getElementById("historyPanelLoading").style.display = "none";

      const locationSelect = document.getElementById("Location");
      locationSelect.innerHTML = "";
      if (Object.keys(Locations).length !== 0) {
        Object.keys(Locations).forEach((location) => {
          const locationOption = document.createElement("option");
          locationOption.value = location;
          locationOption.text = Locations[location];
          locationOption.selected = location === locationSelect.getAttribute("data-value");
          locationSelect.appendChild(locationOption);
        })
      }
      document.getElementById("loadMe").style.visibility = "hidden";
    });
  }
</script>
<div id="appointments" class="tabcontent" style="display:block;">
    <div class="panel flex-row" style="justify-content:center;" id="appointmentsPanelLoading">
      {% render '_loading-button', id:"appt-load-btn", text:"", class:"button--loading dark" %}
    </div>
  <div class="panel" id="AppointmentsPanel" style="display:none;"></div>
  <div class="panel" id="noAppointments" style="display:none;">
    <div class="flex-row" style="justify-content:space-between;">
      <div class="flex-col" style="align-items:flex-start">
        <p class="medium">YOU HAVE NO APPOINTMENTS</p>
        <p class="SF medium" style="color:var(--unnamed-color-6c757d)">Let’s change that.</p>
      </div>
      <a class="SF book-now-btn" href="/pages/appointments">BOOK NOW</a>
    </div>
    <hr class="account-hr">
  </div>
</div>
<div id="history" class="tabcontent">
    <div class="panel flex-row" style="justify-content:center;" id="historyPanelLoading">
      {% render '_loading-button', text:"", class:"button--loading dark" %}
    </div>
  <div class="panel" id="HistoryPanel" style="display:none;"></div>
  <div class="panel" id="noHistory" style="display:none;">
    <div class="flex-row" style="justify-content:space-between;">
      <div class="flex-col" style="align-items:flex-start">
        <p class="medium">YOU HAVE NO APPOINTMENTS</p>
        <p class="SF medium" style="color:var(--unnamed-color-6c757d)">Let’s change that.</p>
      </div>
      <a class="SF book-now-btn" href="/pages/appointments">BOOK NOW</a>
    </div>
    <hr class="account-hr">
  </div>
</div>